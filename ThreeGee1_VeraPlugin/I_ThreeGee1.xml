<?xml version="1.0"?>
<implementation>
	<settings>
		<commUse>rs232</commUse>
		<protocol>crlf</protocol>
	</settings>
	<functions>

	  local MyDevice

		function startup (lul_device)
			luup.log("ThreeGee1: Bridge Plugin: Loading Library L_ThreeGee1...")
			if (package.path:find ("/etc/cmh-ludl/?.lua;/etc/cmh-lu/?.lua", 1, true) == nil) then
				package.path = package.path .. ";/etc/cmh-ludl/?.lua;/etc/cmh-lu/?.lua"
			end
			package.loaded.L_ThreeGee1 = nil
			MyDevice = require("L_ThreeGee1")
			if (package.loaded.L_ThreeGee1 == nil)
			then
				luup.log("ThreeGee1: plugin: plugin is not installed correctly. Library L_ThreeGee1 cannot be loaded.", 1)
				luup.task("Plugin not correctly installed", 2, "ThreeGee1 plugin", -1)
				return false
			end
			luup.set_failure(false, lul_device)
			luup.log("ThreeGee1: plugin: library L_ThreeGee1 loaded")
			luup.variable_set("urn:konektedplay-com:serviceId:ThreeGee1", "Received", "no message received", lul_device)
			MyDevice.initializeVariables(lul_device)
			luup.log("ThreeGee1: start intervalCallback()")
			intervalCallback(lul_device)
		end

		-- callback function to repeat ping to gateway and internet
		function intervalCallback (lul_device)
		  MyDevice.pingGateway(tonumber(lul_device))  -- handler for Serial Gateway
			MyDevice.ipCheckAndNotify(tonumber(lul_device))  -- Notifications for Loss of Internet (Ethernet Ping Sensor)
			luup.log("ThreeGee1: Restarting intervalCallback")
		  local pingFrequency = luup.variable_get("urn:konektedplay-com:serviceId:ThreeGee1", "PingFrequency", tonumber(lul_device))
			luup.call_timer("intervalCallback", 1, tostring(pingFrequency), "", lul_device)
		end
	</functions>
	<incoming>
		<lua>
			luup.log("ThreeGee1: Received: '"..(lul_data or "nil").."'")
			if(lul_data == "PING:-1") then
			  luup.variable_set("urn:konektedplay-com:serviceId:ThreeGee1", "Received", "Last Ping: "..os.date("%c"), lul_device)
			else
			  luup.variable_set("urn:konektedplay-com:serviceId:ThreeGee1", "Received", (lul_data or "nil"), lul_device)
			end
			luup.variable_set("urn:konektedplay-com:serviceId:ThreeGee1", "LastUpdate", os.date("%c"), lul_device)
		</lua>
	</incoming>
	<startup>startup</startup>
	<actionList>
		<action>
			<serviceId>urn:konektedplay-com:serviceId:ThreeGee1</serviceId>
			<name>Send</name>
			<run>
				if (luup.variable_get("urn:micasaverde-com:serviceId:SecuritySensor1", "Armed", lul_device) == "1") then
					local message = lul_settings.Message or ""
					luup.log("ThreeGee1: Send: '"..message.."'")
					if (message == "") then
						luup.variable_set("urn:konektedplay-com:serviceId:ThreeGee1", "Received", "message was empty", lul_device)
					elseif (not luup.io.write("MSSG:"..lul_settings.Message)) then
						luup.log("ThreeGee1: Could not send the message.")
						luup.variable_set("urn:konektedplay-com:serviceId:ThreeGee1", "Received", "couldn't send message", lul_device)
					end
				else
					local message = lul_settings.Message or ""
					luup.log("ThreeGee1: Device not armed, Message:"..message.." not sent")
				end
			</run>
		</action>
		<action>
    	<serviceId>urn:micasaverde-com:serviceId:SecuritySensor1</serviceId>
      <name>SetArmed</name>
      <run>
				luup.log("ThreeGee1: Running SetArmed"..lul_settings.newArmedValue)
        local armed = tonumber(lul_settings.newArmedValue or "0")
        if armed ~= 0 then
        	MyDevice.arm(lul_device)
        else
        	MyDevice.disarm(lul_device)
        end
        return true
      </run>
    </action>
    <action>
        <serviceId>urn:konektedplay-com:serviceId:ThreeGee1</serviceId>
        <name>SetGatewayTimeout</name>
        <run>
            luup.log("ThreeGee1: Running SetGatewayTimeout")
            local newInterval = tonumber(lul_settings.GatewayTimeout or "0")
            luup.log("ThreeGee1: new interval:"..newInterval)
            MyDevice.setGatewayTimeout(lul_device, newInterval)
            return true
        </run>
    </action>
    <action>
        <serviceId>urn:konektedplay-com:serviceId:ThreeGee1</serviceId>
        <name>SetPingFrequency</name>
        <run>
            luup.log("ThreeGee1: Running SetPingFrequency")
            local newInterval = tonumber(lul_settings.PingFrequency or "0")
            luup.log("ThreeGee1: Ping interval:"..newInterval)
            MyDevice.setPingFrequency(lul_device, newInterval)
            return true
        </run>
    </action>
    <action>
        <serviceId>urn:konektedplay-com:serviceId:ThreeGee1</serviceId>
        <name>SetPingTimeout</name>
        <run>
            luup.log("ThreeGee1: Running SetPingTimeout")
            local newInterval = tonumber(lul_settings.PingTimeout or "0")
            luup.log("ThreeGee1: Ping timeout:"..newInterval)
            MyDevice.setPingTimeout(lul_device, newInterval)
            return true
        </run>
    </action>
		<action>
        <serviceId>urn:konektedplay-com:serviceId:ThreeGee1</serviceId>
        <name>SetIPAddress</name>
        <run>
            luup.log("ThreeGee1: Running SetIPAddress")
            local newIP = lul_settings.IPAddress or "nil"
            luup.log("ThreeGee1: IP Address:"..newIP)
            MyDevice.setIPAddress(lul_device, newIP)
            return true
        </run>
    </action>
		<action>
        <serviceId>urn:konektedplay-com:serviceId:ThreeGee1</serviceId>
        <name>SetIpRepeatTries</name>
        <run>
            luup.log("ThreeGee1: Running SetIpRepeatTries")
            local ipTries = tonumber(lul_settings.IpRepeatTries) or 0
            luup.log("ThreeGee1: Repeat Tries:"..ipTries)
            MyDevice.setIpRepeatTries(lul_device, ipTries)
            return true
        </run>
    </action>
		<action>
        <serviceId>urn:konektedplay-com:serviceId:ThreeGee1</serviceId>
        <name>SetRouterDeviceID</name>
        <run>
            luup.log("ThreeGee1: Running SetRouterDeviceID")
            local deviceID = tonumber(lul_settings.RouterDeviceID) or 0
            luup.log("ThreeGee1: Router Device ID:"..deviceID)
            MyDevice.setRouterDeviceID(lul_device, deviceID)
            return true
        </run>
    </action>
	</actionList>
</implementation>
